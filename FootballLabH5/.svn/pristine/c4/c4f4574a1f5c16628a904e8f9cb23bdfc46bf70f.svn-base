package com.visolink.service.football.guessprofit;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.sf.json.JSONObject;

import org.springframework.stereotype.Service;

import com.visolink.dao.DaoSupport;
import com.visolink.entity.GameMapper;
import com.visolink.service.football.service.ServiceService;
import com.visolink.util.Const;
import com.visolink.util.DateUtil;
import com.visolink.util.JsonUtil;
import com.visolink.util.PageData;
import com.visolink.util.RedisUtils;

@Service
public class GuessProfitService {
	
	@Resource(name = "serviceService")
	private ServiceService serviceService;
	
	@Resource(name = "daoSupport")
	private DaoSupport dao;
	
	private static Integer REDIS_DB = 1;
	
	private static String GUESS_PROFIT_KEY = "guessProfit:";
	
	public static long LIVE_TIME = 60 * 60 * 24 * 7;
	
	/**
	 * 获取竞猜盈亏列表
	 * @param pd
	 * @return
	 * @throws Exception
	 */
	public List<PageData> getGuessProfitList(PageData pd) throws Exception{
		
		List<PageData> result = new ArrayList<PageData>();
		
		Map<String, Integer> strategyNumMap = serviceService.getTodayStrategyNum(pd.getString("experts_code"));
		Map<String, Integer> notStartstrategyNumMap = serviceService.getNotStartStrategyNum(pd.getString("experts_code"));
		Map<String, List<PageData>> serviceMap = serviceService.findMapByExpert(pd);
		for (Map.Entry<String,List<PageData>> entry : serviceMap.entrySet()) {
			List<PageData> list = entry.getValue();
			for (PageData service : list) {
				String serviceId  = service.getString("id");
				Integer strategyNum = strategyNumMap.get(serviceId);
				Integer notStartstrategyNum = notStartstrategyNumMap.get(serviceId);
				if(strategyNum==null){
					continue;
				}else if(notStartstrategyNum!=null && strategyNum.intValue()!=notStartstrategyNum.intValue()){
					continue;
				}
				result.add(service);
			}
		}
		
		//1.查询历史盈亏  2.查询第一场比赛比赛时间  3.查询当日预计盈利率
		for (PageData service : result) {
			service.putAll(this.getServiceProfitInfo(service.getString("service_code"), service.getString("id")));
		}
		
		Collections.sort(result,new Comparator<PageData>() {

			@Override
			public int compare(PageData o1, PageData o2) {
				Double earningRate1 = (Double) o1.get("earningRate");
				Double earningRate2 = (Double) o2.get("earningRate");
				return earningRate2.compareTo(earningRate1);
			}
		});
		
		return result;
	}
	
	/**
	 * 查询竞猜盈亏service基本信息
	 * @param serviceCode 
	 * @param serviceId
	 * @return Map<String,Object>  profitHistoryList:历史盈亏  firstGameTime:第一场时间 earningRate：当日预计盈利率
	 * @throws Exception 
	 */
	public Map<String,Object> getServiceProfitInfo(String serviceCode,String serviceId) throws Exception{
		
		Map<String,Object> result = new HashMap<String,Object>();
		
		String guessProfitInfoJson = RedisUtils.getString(GUESS_PROFIT_KEY+serviceId+":"+DateUtil.getGameDate(), REDIS_DB);
		if(guessProfitInfoJson!=null && guessProfitInfoJson!=""){
			return (Map<String, Object>) JsonUtil.jsonToBean(guessProfitInfoJson, Map.class);
		}
		
		result.put("profitHistoryList", dao.findForList("ServiceProfitHistoryMapper.getServiceProfitList", serviceId));
	
		Integer serviceType = -1;
		if("DC".equals(serviceCode)){
			serviceType = 3;
		}else{
			if("JCRQSPF".equals(serviceCode)){
				serviceType = 2;
			}else{
				serviceType = 1;
			}
		}
		PageData pdQuery = new PageData();
		pdQuery.put("beginTime", DateUtil.getSpecifiedDayAfter(DateUtil.getSchemeDate(), -1) + Const.GAME_TIME);
		pdQuery.put("endTime", DateUtil.getSchemeDate() + Const.GAME_TIME);
		pdQuery.put("serviceId", serviceId);
		pdQuery.put("serviceType", serviceType);
		List<GameMapper> gameList = new ArrayList<GameMapper>();
		if("DC".equals(serviceCode) || "JCSPF".equals(serviceCode) || "JCRQSPF".equals(serviceCode)){
			gameList = (List<GameMapper>) dao.findForList("SingleMapper.singleTimeList", pdQuery);
		}else if("JCECY".equals(serviceCode) || "JCRQSPF".equals(serviceCode)){
			gameList = (List<GameMapper>) dao.findForList("TwoOnOneMapper.twoOnOneTimeList", pdQuery);
		}else if("YP".equals(serviceCode)){
			gameList =  (List<GameMapper>) dao.findForList("AsianMapper.asianTimeList", pdQuery);
		}
		
		if(gameList!=null && gameList.size()>0){
			result.put("firstGameTime", DateUtil.fomatTime(gameList.get(0).getGame_date_time()).getTime());;
		}
		
		result.put("earningRate", serviceService.getTodayEarningRate(serviceId, serviceCode));
		
		RedisUtils.add(GUESS_PROFIT_KEY+serviceId+":"+DateUtil.getGameDate(), JsonUtil.beanToJson(result), LIVE_TIME, REDIS_DB);
		
		return result;
	
	}

}
