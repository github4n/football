<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd
	">
	
	<!-- 启用注解 -->
	<context:annotation-config />
	
	<!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
	<context:component-scan base-package="com.visolink">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">   
    	<property name="dataSource" ref="multipleDataSource"></property>
 	</bean>
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
		<property name="locations">  
			<list>  
                 <value>/WEB-INF/classes/dbconfig.properties</value>  
            </list>  
        </property>  
	</bean> 
	
	<!-- 阿里 druid数据库连接池 -->
	<!-- 远程 -->
	<bean id="remoteDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
         <!-- 数据库基本信息配置 -->
         <property name="url" value="${remote.url}" />  
         <property name="username" value="${remote.username}" />  
         <property name="password" value="${remote.password}" />  
         <property name="driverClassName" value="${remote.driverClassName}" />  
         <property name="filters" value="${remote.filters}" />  
   		 <!-- 最大并发连接数 -->
         <property name="maxActive" value="${remote.maxActive}" />
         <!-- 初始化连接数量 -->
         <property name="initialSize" value="${remote.initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name="maxWait" value="${remote.maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name="minIdle" value="${remote.minIdle}" />  
   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="${remote.timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="${remote.minEvictableIdleTimeMillis}" />  
         <property name="validationQuery" value="${remote.validationQuery}" />  
         <property name="testWhileIdle" value="${remote.testWhileIdle}" />  
         <property name="testOnBorrow" value="${remote.testOnBorrow}" />  
         <property name="testOnReturn" value="${remote.testOnReturn}" />  
         <property name="maxOpenPreparedStatements" value="${remote.maxOpenPreparedStatements}" />
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="${remote.removeAbandoned}" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="${remote.removeAbandonedTimeout}" />
         <!-- 关闭abanded连接时输出错误日志 -->   
         <property name="logAbandoned" value="${remote.logAbandoned}" />
	</bean>
	<!-- 本地 -->
	<bean id="localDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
         <!-- 数据库基本信息配置 -->
         <property name="url" value="${local.url}" />  
         <property name="username" value="${local.username}" />  
         <property name="password" value="${local.password}" />  
         <property name="driverClassName" value="${local.driverClassName}" />  
         <property name="filters" value="${local.filters}" />  
   		 <!-- 最大并发连接数 -->
         <property name="maxActive" value="${local.maxActive}" />
         <!-- 初始化连接数量 -->
         <property name="initialSize" value="${local.initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name="maxWait" value="${local.maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name="minIdle" value="${local.minIdle}" />  
   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="${local.timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="${local.minEvictableIdleTimeMillis}" />  
         <property name="validationQuery" value="${local.validationQuery}" />  
         <property name="testWhileIdle" value="${local.testWhileIdle}" />  
         <property name="testOnBorrow" value="${local.testOnBorrow}" />  
         <property name="testOnReturn" value="${local.testOnReturn}" />  
         <property name="maxOpenPreparedStatements" value="${local.maxOpenPreparedStatements}" />
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="${local.removeAbandoned}" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="${local.removeAbandonedTimeout}" />
         <!-- 关闭abanded连接时输出错误日志 -->   
         <property name="logAbandoned" value="${local.logAbandoned}" />
	</bean>  
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		<tx:method name="remove*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
			<tx:method name="del*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="cancel*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="pub*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
           <tx:method name="edit*" propagation="REQUIRED" read-only="false" 
           rollback-for="java.lang.Exception" />
           <tx:method name="add*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
           
           <tx:method name="give*" propagation="REQUIRED" read-only="false" 
           rollback-for="java.lang.Exception" />
           
           <tx:method name="guess*" propagation="REQUIRED" read-only="false" 
           rollback-for="java.lang.Exception" />
			           
			<tx:method name="find*"  propagation="SUPPORTS" read-only="true"  />
			<tx:method name="select*" propagation="SUPPORTS"  read-only="true"  />
			<tx:method name="get*"  propagation="SUPPORTS" read-only="true"  />
			<tx:method name="list*" propagation="SUPPORTS"  read-only="true"  />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="page*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 事物处理 -->
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.visolink.service..*(..))  || execution(* com.visolink.h5.service..*(..)) " />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>
	
	<bean id="multipleDataSource" class="com.visolink.h5.datasource.MultipleDataSource">
        <property name="defaultTargetDataSource" ref="localDataSource"/>
        <property name="targetDataSources">
            <map>
                <entry key="localDataSource" value-ref="localDataSource"/>
                <entry key="remoteDataSource" value-ref="remoteDataSource"/>
            </map>
        </property>
    </bean>
	
	<!-- 配置mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="multipleDataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
        <!-- mapper扫描 -->
        <property name="mapperLocations" value="classpath:mybatis/*/*.xml"></property>
    </bean>
    
     <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.visolink.h5.mapper" />  
    </bean>
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<!-- ================ Shiro start ================ -->
		 <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
			<property name="realm" ref="ShiroRealm" />
		</bean>
		
		<!-- 項目自定义的Realm -->
	    <bean id="ShiroRealm" class="com.visolink.interceptor.shiro.ShiroRealm" ></bean>
		
		<!-- Shiro Filter -->
		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
			<property name="securityManager" ref="securityManager" />
			
			<property name="loginUrl" value="/" />
			
			<property name="successUrl" value="/main/index" />
			
			<property name="unauthorizedUrl" value="/login_toLogin" />
			
			<property name="filterChainDefinitions">
				<value>
				/**/dyrs/**= anon
				/static/login/** 	= anon
				/static/js/myjs/** 	= authc
				/static/js/** 		= anon
	           	/code 			= anon
	           	/login_login	 	= anon
	           	/app**/** 			= anon
	           	/**/app/** 			= anon
	           	/weixin/** 			= anon
	           	/webChat/** 		= anon
	           	/wechat/** 		= anon
	           	/TP/** 		= anon
	           	/h5/css/** =anon
	           	/h5/images/** =anon
	           	/h5/js/** =anon
	           	/h5/pic/** =anon
	           	/memberappointment/**=anon
	           	/uploadFiles/fashion/**=anon
	           	/uploadFiles/campaign/**=anon
	           	/plugins/campaign/**=anon
	           	/plugins/ueditor/** =anon
	           	/7mPage/** =anon
	           	/**					= authc
				</value>
			</property>
		</bean>
	<!-- ================ Shiro end ================ -->
	
   
</beans>
